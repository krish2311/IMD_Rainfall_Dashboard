import dash
from dash import dcc, html
from dash.dependencies import Input, Output
import matplotlib
import xarray as xr
import plotly.graph_objs as go
import matplotlib.pyplot as plt
import geopandas as gpd
import pandas as pd
from dash import dash_table
import numpy as np
from datetime import date, datetime
from scipy.stats import ttest_ind
matplotlib.use('Agg')

image_url = "https://mausam.imd.gov.in/responsive/img/logo/imd_logo_a.png"
app = dash.Dash(__name__, suppress_callback_exceptions=True)


# Define the layout of the dashboard with two tabs
app.layout = html.Div(
    style={'background-color': '#F5FFFA'},
    children=[
    html.Div(
        style={"flex": "1", "display": "flex", "align-items": "center", "background-color": "#F5FFFA"},
        children=[
            html.Img(src=image_url, style={"height": "180px", "width": "150px", "margin-left": "50px"}),
            html.H1("Indian Meteorological Department",
                    style={'font-family': 'Arial', "margin-left": "100px", "font-size": "40px"}),
        ],
    ),
    dcc.Tabs(id='tabs', value='tab-1', children=[
        dcc.Tab(label='Temperature', value='tab-1',
                selected_style={'font-family': 'Arial', 'font-weight': 'bold', 'color': 'black',
                                'background-color': '#F5B041',"font-size": "15px"}, children=[
                html.H3('Plot'),
                html.Div([
                    dcc.DatePickerSingle(
                        id='date-picker',
                        min_date_allowed=date(1980, 1, 1),
                        max_date_allowed=date(2020, 12, 31),
                        initial_visible_month=date(1980, 1, 1),
                        placeholder='Select a date',
                        display_format='YYYY-MM-DD'
                    ),
                    html.Button('Generate Plot', id='plot-button1',
                                style={
                                    'background-color': '#F8C471',
                                    'color': 'black',
                                    'font-size': '20px',
                                    'font-family': 'Pacifico',
                                    'border': 'none',
                                    'padding': '10px 20px',
                                    'border-radius': '5px',
                                    'cursor': 'pointer',
                                    'box-shadow': '2px 2px 5px rgba(0, 0, 0, 0.2)',
                                }, n_clicks=0),
                    html.Div(id='plot-output1')
                ])
            ]),
        dcc.Tab(label='Rainfall', value='tab-2',
                selected_style={'font-family': 'Arial', 'font-weight': 'bold', 'color': 'black',
                                'background-color': '#87CEEB',"font-size": "15px"}, children=[
                html.Div([
                    html.H6("Select a State:", style={"font-size": "20px","margin-bottom": "5px"}),
                    dcc.Dropdown(
                        id='file-dropdown',
                        options=[
                            {'label': 'Goa', 'value': '/Users/krishgoyal/Downloads/Goa_New1.csv'}
                            # Add more options for different files
                        ],
                        value=None,
                        placeholder="Select a file"
                    ),
                ]),
                html.Div(id='rainfall-content', style={"margin-top": "10px"}),
                dcc.Graph(id='graph'),
                html.Div(id='top-values'),
                html.Div(id='statistics'),
                html.Div(id='equation'),
                html.Div(id='trend-result')

                # Placeholder for the rainfall content
            ])
    ])
])


@app.callback(
    Output('rainfall-content', 'children'),
    Input('file-dropdown', 'value')
)
def update_rainfall_content(file_path):
    if file_path:
        # Read the selected file
        df = pd.read_csv(file_path)

        return html.Div([
            html.H6("Select an option:", style={"font-size": "20px", "margin-bottom": "5px"}),
            dcc.Dropdown(
                id='option-dropdown',
                options=[
                    {'label': 'Whole Time Series Data', 'value': 'range'},
                    {'label': 'Specific Time Series Data', 'value': 'repeat'}
                ],
                value=None,
                placeholder="Select an option"
            ),
            html.Div([
                html.H6("Select a District:", style={"font-size": "20px", "margin-bottom": "5px"}),
                dcc.Dropdown(
                    id='district-dropdown',
                    options=[{'label': District, 'value': District} for District in df['District'].unique()],
                    value=None,
                    placeholder="Select a district"
                ),
            ], style={"margin-bottom": "10px"}),
            html.Div(id='station-dropdown-container', style={"margin-top": "10px"}),
        ], style={"margin-bottom": "10px"})

    return None


@app.callback(
    Output('station-dropdown-container', 'children'),
    Input('district-dropdown', 'value'),
    Input('file-dropdown', 'value')
)
def update_station_dropdown(district, file_path):
    if district and file_path:
        # Read the selected file
        df = pd.read_csv(file_path)

        # Filter the dataframe based on the selected district
        filtered_df = df[df['District'] == district]

        return html.Div([
            html.H6("Select a station:", style={"font-size": "20px", "margin-bottom": "5px"}),
            dcc.Dropdown(
                id='station-dropdown',
                options=[{'label': station, 'value': station} for station in filtered_df['Station'].unique()],
                value=None,
                placeholder="Select a station"
            ),
        ]),html.Div([
            dcc.DatePickerRange(
                id='my-date-picker-range',
                min_date_allowed=date(1971, 1, 1),
                max_date_allowed=date(2020, 12, 31),
                initial_visible_month=date(1971, 1, 1),
                end_date=date(2020, 12, 31)
            ),
            html.Div(id='output-container-date-picker-range')
        ]), html.Button('Plot Graph', id='plot-button',
                        style={
                            'background-color': '#85C1E9',
                            'color': 'black',
                            'font-size': '20px',
                            'font-family': 'Pacifico',
                            'border': 'none',
                            'padding': '10px 20px',
                            'border-radius': '5px',
                            'cursor': 'pointer',
                            'box-shadow': '2px 2px 5px rgba(0, 0, 0, 0.2)',
                        }, n_clicks=0)
        # Change color here


    return None


@app.callback(
    Output('plot-output1', 'children'),
    Input('plot-button1', 'n_clicks'),
    Input('date-picker', 'date')
)
def generate_plot(n_clicks, date):
    if n_clicks > 0 and date:
        yr = date[:4]
        # List the file paths of the NetCDF files you want to append
        file_paths = "/Users/krishgoyal/Downloads/NCEP_Reanalysis2_data 3/2m_Temp/air.2m.gauss.*.nc"

        # Open the dataset with decode_times=False to prevent cftime errors
        da = xr.open_mfdataset(file_paths, decode_times=False)

        year = int(yr)
        time_values = pd.date_range(start='1980-01-01', end='2020-12-31', freq='D')
        xarray_data = xr.DataArray(da.time, coords={'time': time_values}, dims='time')
        ds = xarray_data
        # Create a new dataset with the same variables as 'da' but with the time coordinate from 'ds'
        ds_new = da.assign_coords(time=ds.time)

        # Access individual variables
        air = ds_new.air
        lat = ds_new.lat
        lon = ds_new.lon

        new_air = air - (273.5)  # convert temperature from kelvin to celsius

        ################ Subsetting in all dimensions###################
        da1 = ds_new.sel(time=date, lat=slice(39.0, 6.2), lon=slice(67, 97.5))
        new_da1 = da1.copy()  # Make a copy of the subsetted data array
        new_da1['air'] = new_air.sel(time=date, lat=slice(39.0, 6.2),
                                     lon=slice(67, 97.5))  # Replace 'air' variable with temperature in Celsius

        # Plotting
        fig, ax = plt.subplots()
        new_da1.air.plot(ax=ax, cmap='coolwarm', vmin=-30, vmax=30,
                         levels=np.arange(-30, 30, 2))  # for green and blue plot
        # Read and plot the shapefile
        shp = gpd.read_file("/Users/krishgoyal/Documents/untitled folder/india updated state boundary.shp")
        shp.plot(ax=ax, alpha=0.8, facecolor='None', lw=1)
        # Add text description
        description = 'Daily Air Temperature (Â°C) at 2m'
        plt.text(0.5, 1.09, description, transform=ax.transAxes, ha='center', fontsize=12)

        # Generate the plot as a base64-encoded image
        import io
        import base64
        buffer = io.BytesIO()
        plt.savefig(buffer, format='png')
        buffer.seek(0)
        encoded_image = base64.b64encode(buffer.getvalue()).decode()

        return html.Div([
            html.H4('Plot Generated'),
            html.Img(src='data:image/png;base64,{}'.format(encoded_image), style={'width': '50%'})
        ])

    return html.Div()


@app.callback(
    Output('graph', 'figure'),
    Output('top-values', 'children'),
    Output('statistics', 'children'),
    Output('equation', 'children'),
    Output('trend-result', 'children'),
    Input('station-dropdown', 'value'),
    Input('option-dropdown', 'value'),
    Input('file-dropdown', 'value'),
    Input('my-date-picker-range', 'start_date'),
    Input('my-date-picker-range', 'end_date'),
    Input('plot-button', 'n_clicks')
)
def update_graph(station_name, option, file_path, start_date, end_date, n_clicks):  # Add df as an input parameter
    if n_clicks > 0 and station_name and option and file_path and start_date and end_date:
        # Read the selected file
        # Searching for the specific station
        df = pd.read_csv(file_path)
        search_result = df[df['Station'] == station_name]

        # Deleting the unnecessary columns from the dataframe
        columns_to_delete = ['Unnamed: 0.1', 'Unnamed: 0', 'Cac_Lat_Lon', 'District', 'Station', 'Type', 'Card',
                             'ST_DT', 'Year']
        new_df = search_result.drop(columns_to_delete, axis=1)

        # Creating day wise data
        dates = pd.date_range(start='1/1/1971', periods=18300, freq='D')
        y = new_df.values.flatten()[:len(dates)]

        if option == 'range':
            start_date = pd.to_datetime(start_date)
            end_date = pd.to_datetime(end_date)

            # Filter the data within the date range
            mask = (dates >= start_date) & (dates <= end_date)
            filtered_dates = dates[mask]
            filtered_values = y[mask]

            # Handle NaN values
            valid_mask = ~np.isnan(filtered_values)
            valid_dates = filtered_dates[valid_mask]
            valid_values = filtered_values[valid_mask]



            # Calculate trend line
            trend_line = np.polyfit(range(len(valid_values)), valid_values, 1)
            trend_line_values = np.polyval(trend_line, range(len(valid_values)))

            slope = trend_line[0]
            intercept = trend_line[1]
            equation = f"y = {slope:.2f}x + {intercept:.2f}"

            control_group = filtered_values[:len(valid_values)]
            experimental_group = valid_values
            # Exclude NaN values from control_group and experimental_group
            control_group = control_group[~np.isnan(control_group)]
            experimental_group = experimental_group[~np.isnan(experimental_group)]

            t_statistic, p_value = ttest_ind(control_group, experimental_group, nan_policy='omit')
            significance_level = 0.05

            if p_value < significance_level:
                is_significant = "Yes"
            else:
                is_significant = "No"

            time_series_data = pd.DataFrame({'Date': filtered_dates, 'Value': filtered_values})
            sorted_data = time_series_data.sort_values(by='Value', ascending=False)
            top_5_data = sorted_data.head(5)

            fig = go.Figure()
            fig.add_trace(go.Scatter(x=filtered_dates, y=filtered_values, mode='lines', name='Data'))
            fig.add_trace(go.Scatter(x=valid_dates, y=trend_line_values, mode='lines', name='Trend Line'))
            fig.update_layout(title='Time Series Graph', xaxis={'title': 'Date'}, yaxis={'title': 'Value'})

            std_dev = np.nanstd(filtered_values)
            mean_val = np.nanmean(filtered_values)
            cv = (std_dev / mean_val)

            return fig, html.Div([
                html.H6("Statistics:",style={"font-size":"20px","margin-bottom": "5px"}),
                html.Div("Standard Deviation: {:.2f}".format(std_dev), style={"font-size": "20px","margin-bottom": "5px"}),
                html.Div("Mean: {:.2f}".format(mean_val), style={"font-size": "20px","margin-bottom": "5px"}),
                html.Div("Coefficient of Variation: {:.2f}".format(cv), style={"font-size": "20px","margin-bottom": "5px"}),
               ]),html.Div([
                html.H6("Equation of Trend Line:", style={"font-size": "20px","margin-bottom": "5px"}),
               html.Div(equation, style={"font-size": "20px","margin-bottom": "5px"})
               ]),html.Div([
               html.H6("T-Test Result", style={"font-size": "20px", "margin-bottom": "5px"}),
               html.Div("T-Statistic: {:.2f}".format(t_statistic), style={"font-size": "20px", "margin-bottom": "5px"}),
               html.Div("P-Value: {:.2f}".format(p_value), style={"font-size": "20px", "margin-bottom": "5px"}),
               html.Div("Is the trend significant? {}".format(is_significant), style={"font-size": "20px", "margin-bottom": "5px"})
                ]),html.Div([
                html.H6("Top 5 maximum values:",style={"font-size":"20px","margin-bottom": "5px"}),
                dash_table.DataTable(
                    data=top_5_data.to_dict('records'),
                    columns=[{'name': col, 'id': col} for col in top_5_data.columns]
                )
               ])
        elif option == 'repeat':
            start_date_range = datetime.strptime(start_date, "%Y-%m-%d")
            start_year_range = start_date_range.year
            start_month_range = start_date_range.month
            start_day_range = start_date_range.day

            end_date_range = datetime.strptime(end_date, "%Y-%m-%d")
            end_year_range = end_date_range.year
            end_month_range = end_date_range.month
            end_day_range = end_date_range.day

            # Create empty DataFrames for filtered values and dates
            filtered_values_df = pd.DataFrame(columns=['Value'])
            filtered_dates_df = pd.DataFrame(columns=['Date'])

            # Iterate over the chosen range of years
            for year_range in range(start_year_range, end_year_range + 1):
                # Specify the date range for the current year
                start_date = pd.to_datetime(f'{year_range}-{start_month_range}-{start_day_range}')
                end_date = pd.to_datetime(f'{year_range}-{end_month_range}-{end_day_range}')

                # Filter the data within the date range
                mask = (dates >= start_date) & (dates <= end_date)
                filtered_dates = dates[mask]
                filtered_values = y[mask]

                # Create DataFrames for filtered values and dates
                values_df = pd.DataFrame({'Value': filtered_values})
                dates_df = pd.DataFrame({'Date': filtered_dates})

                # Append the filtered values DataFrame to the main DataFrame
                filtered_values_df = pd.concat([filtered_values_df, values_df], ignore_index=True)

                # Append the filtered dates DataFrame to the main DataFrame
                filtered_dates_df = pd.concat([filtered_dates_df, dates_df], ignore_index=True)

            valid_mask = ~np.isnan(filtered_values_df['Value'])
            valid_dates = filtered_dates_df.loc[valid_mask, 'Date']
            valid_values = filtered_values_df.loc[valid_mask, 'Value']

            # Calculate trend line
            trend_line = np.polyfit(range(len(valid_values)), valid_values, 1)
            trend_line_values = np.polyval(trend_line, range(len(valid_values)))

            slope = trend_line[0]
            intercept = trend_line[1]
            equation = f"y = {slope:.2f}x + {intercept:.2f}"

            control_group = filtered_values[:len(valid_values)]
            experimental_group = valid_values
            t_statistic, p_value = ttest_ind(control_group, experimental_group)
            significance_level = 0.05

            if p_value < significance_level:
                is_significant = "Yes"
            else:
                is_significant = "No"

            time_series_data = pd.DataFrame({'Date': filtered_dates_df['Date'], 'Value': filtered_values_df['Value']})
            sorted_data = time_series_data.sort_values(by='Value', ascending=False)
            top_5_data = sorted_data.head(5)

            fig = go.Figure()
            fig.add_trace(go.Scatter(x=filtered_dates_df['Date'], y=filtered_values_df['Value'], mode='lines', name='Data'))
            fig.add_trace(go.Scatter(x=valid_dates, y=trend_line_values, mode='lines', name='Trend Line'))
            fig.update_layout(title='Time Series Graph', xaxis={'title': 'Date'}, yaxis={'title': 'Value'})

            std_dev = np.nanstd(filtered_values_df['Value'])
            mean_val = np.nanmean(filtered_values_df['Value'])
            # Calculate the coefficient of variation
            cv = (std_dev / mean_val)

            return fig, html.Div([
                html.H6("Statistics:", style={"font-size": "20px", "margin-bottom": "5px"}),
                html.Div("Standard Deviation: {:.2f}".format(std_dev),style={"font-size": "20px", "margin-bottom": "5px"}),
                html.Div("Mean: {:.2f}".format(mean_val), style={"font-size": "20px", "margin-bottom": "5px"}),
                html.Div("Coefficient of Variation: {:.2f}".format(cv), style={"font-size": "20px", "margin-bottom": "5px"}),
                 ]), html.Div([
                html.H6("Equation of Trend Line:", style={"font-size": "20px", "margin-bottom": "5px"}),
                html.Div(equation, style={"font-size": "20px", "margin-bottom": "5px"})
                  ]),html.Div([
                  html.H6("T-Test Result", style={"font-size": "20px", "margin-bottom": "5px"}),
                html.Div("T-Statistic: {:.2f}".format(t_statistic), style={"font-size": "20px", "margin-bottom": "5px"}),
                     html.Div("P-Value: {:.2f}".format(p_value), style={"font-size": "20px", "margin-bottom": "5px"}),
                 html.Div("Is the trend significant? {}".format(is_significant), style={"font-size": "20px", "margin-bottom": "5px"})
               ]), html.Div([
                html.H6("Top 5 maximum values:", style={"font-size": "20px", "margin-bottom": "5px"}),
                dash_table.DataTable(
                    data=top_5_data.to_dict('records'),
                    columns=[{'name': col, 'id': col} for col in top_5_data.columns]
                )
            ])
    return go.Figure(), html.Div(), html.Div(), html.Div(),html.Div()


if __name__ == '__main__':
    app.run_server(debug=True)
